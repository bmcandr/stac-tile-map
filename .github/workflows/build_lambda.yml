---
name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    environment: lambda
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - uses: pantsbuild/actions/init-pants@v4-scie-pants
      # This action bootstraps pants and manages 2-3 GHA caches.
      # See: github.com/pantsbuild/actions/tree/main/init-pants/
      with:
        # v0 makes it easy to bust the cache if needed
        # just increase the integer to start with a fresh cache
        gha-cache-key: v0
        # The Python backend uses named_caches for Pip/PEX state,
        # so it is appropriate to invalidate on lockfile changes.
        named-caches-hash: ${{ hashFiles('poetry.lock') }}
        # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
        # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
        # changes to any file that can affect the build, so may not be practical in larger repos.
        # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
        cache-lmdb-store: 'true'  # defaults to 'false'
        # Note that named_caches and lmdb_store falls back to partial restore keys which
        # may give a useful partial result that will save time over completely clean state,
        # but will cause the cache entry to grow without bound over time.
        # See https://pants.readme.io/docs/using-pants-in-ci for tips on how to periodically clean it up.
        # Alternatively you change gha-cache-key to ignore old caches.
    - name: Package / Run
      run: |
        pants --tag="${{ vars.PACKAGE_TAG }}" package ::
    - name: Upload PEX
      uses: actions/upload-artifact@v3
      with:
        name: ${{ vars.LAMBDEX_NAME }}
        path: ${{ vars.LAMBDEX_PATH }}/${{ vars.LAMBDEX_FILENAME }}
    - name: Upload pants log
      uses: actions/upload-artifact@v3
      with:
        name: pants-log
        path: ${{ vars.PANTS_LOG_PATH }}
      if: always()  # We want the log even on failures.

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment: lambda
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    steps:
    - name: Install AWS CLI
      uses: unfor19/install-aws-cli-action@v1
    - name: Download Lambdex artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ vars.LAMBDEX_NAME }}
    - name: Upload to S3
      run: aws s3 cp ${{ vars.LAMBDEX_FILENAME }} s3://${{ secrets.AWS_BUCKET }}/${{ vars.LAMBDEX_FILENAME }}
    - name: Update Lambda function
      run: aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} --s3-bucket ${{ secrets.AWS_BUCKET }} --s3-key ${{ vars.LAMBDEX_FILENAME }}